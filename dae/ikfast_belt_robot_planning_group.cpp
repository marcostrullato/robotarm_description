/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2021-02-09 08:20:18.102936
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=((1.0)*j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[0]);
x6=IKcos(j[2]);
x7=IKcos(x2);
x8=IKsin(x2);
x9=((0.12)*x5);
x10=((0.12)*x3);
x11=((0.12)*x0);
x12=(x1*x8);
x13=((0.12)*x1*x7);
IkReal x14=(x1*x11);
IkReal x15=((1.0)*x0*x10);
eetrans[0]=(((x6*(((((-1.0)*x15*x7))+(((-1.0)*x11*x12))))))+x14+((x4*(((((-1.0)*x15*x8))+((x14*x7)))))));
IkReal x16=(x3*x9);
IkReal x17=((1.0)*x1*x9);
eetrans[1]=(((x4*((((x16*x8))+(((-1.0)*x17*x7))))))+(((-1.0)*x17))+((x6*((((x16*x7))+((x12*x9)))))));
eetrans[2]=((0.13)+x10+((x4*(((((0.12)*x12))+((x10*x7))))))+((x6*(((((-1.0)*x10*x8))+x13)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=((-0.13)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x18=((1.0)*j1);
IkReal x19=pz*pz;
IkReal x20=((0.24)*pz);
IkReal x21=((1.0)*x19);
IkReal x24=IKsin(x18);
IkReal x22=x24*x24;
IkReal x25=IKcos(x18);
IkReal x23=x25*x25;
CheckValue<IkReal> x26=IKPowWithIntegerCheck((((x20*x22))+((x20*x23))),-1);
if(!x26.valid){
continue;
}
cj1array[0]=((-1.0)*(x26.value)*(((0.0144)+(((-0.0144)*x23))+(((-0.0144)*x22))+(((-1.0)*x21*x23))+(((-1.0)*x21*x22)))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x27=((1.0)*j1);
IkReal x28=IKcos(x27);
IkReal x29=IKsin(x27);
evalcond[0]=((-0.0144)+(((0.0144)*(x28*x28)))+(((0.0144)*(x29*x29)))+(((0.24)*pz*(IKcos(j1))))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x30=((1.0)*j1);
IkReal x31=((8.33333333333333)*pz);
IkReal x32=IKcos(x30);
IkReal x33=IKsin(x30);
if( IKabs(((((-1.0)*x32))+((cj1*x31*x32))+((sj1*x31*x33)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x31*x33))+((sj1*x31*x32))+x33)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x32))+((cj1*x31*x32))+((sj1*x31*x33))))+IKsqr(((((-1.0)*cj1*x31*x33))+((sj1*x31*x32))+x33))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x32))+((cj1*x31*x32))+((sj1*x31*x33))), ((((-1.0)*cj1*x31*x33))+((sj1*x31*x32))+x33));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x34=((1.0)*j1);
IkReal x35=IKcos(j2);
IkReal x36=IKsin(j2);
IkReal x37=(cj1*pz);
IkReal x38=IKcos(x34);
IkReal x39=IKsin(x34);
IkReal x40=((1.0)*pz*sj1);
IkReal x41=(x36*x39);
IkReal x42=(x35*x39);
IkReal x43=(x36*x38);
IkReal x44=(x35*x38);
IkReal x45=((0.12)*x44);
IkReal x46=((0.12)*x41);
IkReal x47=((0.12)*x43);
IkReal x48=((0.12)*x42);
IkReal x49=(x46+x45);
evalcond[0]=((-0.12)+(((-1.0)*x47))+x37+x48);
evalcond[1]=((((-1.0)*x40))+x49);
evalcond[2]=((((-1.0)*x49))+((x37*x44))+((x37*x41))+(((-1.0)*x40*x43))+((pz*sj1*x42)));
evalcond[3]=((0.12)+(((-1.0)*x48))+((x37*x42))+(((-1.0)*x40*x44))+(((-1.0)*x40*x41))+x47+(((-1.0)*x37*x43)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x50=((1.0)*j1);
CheckValue<IkReal> x51=IKPowWithIntegerCheck(pz,-1);
if(!x51.valid){
continue;
}
IkReal x52=IKcos(x50);
IkReal x53=IKsin(x50);
cj1array[0]=((-4.16666666666667)*(x51.value)*(((-0.0144)+(((0.0144)*(x52*x52)))+(((0.0144)*(x53*x53)))+(((-1.0)*(pz*pz))))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x54=((1.0)*j1);
IkReal x55=pz*pz;
IkReal x56=((0.24)*pz);
IkReal x57=((1.0)*x55);
IkReal x60=IKsin(x54);
IkReal x58=x60*x60;
IkReal x61=IKcos(x54);
IkReal x59=x61*x61;
evalcond[0]=((0.0144)+(((-0.0144)*x59))+(((-0.0144)*x58))+((((((x56*x58))+((x56*x59))))*(IKcos(j1))))+(((-1.0)*x57*x58))+(((-1.0)*x57*x59)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x62=((1.0)*j1);
IkReal x63=((8.33333333333333)*pz);
IkReal x64=IKcos(x62);
IkReal x65=IKsin(x62);
if( IKabs((((cj1*x63*x64))+((sj1*x63*x65))+(((-1.0)*x64)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x63*x65))+((sj1*x63*x64))+x65)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x63*x64))+((sj1*x63*x65))+(((-1.0)*x64))))+IKsqr(((((-1.0)*cj1*x63*x65))+((sj1*x63*x64))+x65))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x63*x64))+((sj1*x63*x65))+(((-1.0)*x64))), ((((-1.0)*cj1*x63*x65))+((sj1*x63*x64))+x65));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x66=((1.0)*j1);
IkReal x67=IKcos(j2);
IkReal x68=IKsin(j2);
IkReal x69=(cj1*pz);
IkReal x70=IKcos(x66);
IkReal x71=IKsin(x66);
IkReal x72=((1.0)*pz*sj1);
IkReal x73=(x68*x71);
IkReal x74=(x67*x71);
IkReal x75=(x68*x70);
IkReal x76=(x67*x70);
IkReal x77=((0.12)*x76);
IkReal x78=((0.12)*x73);
IkReal x79=((0.12)*x75);
IkReal x80=((0.12)*x74);
IkReal x81=(x77+x78);
evalcond[0]=((-0.12)+(((-1.0)*x79))+x69+x80);
evalcond[1]=((((-1.0)*x72))+x81);
evalcond[2]=(((pz*sj1*x74))+((x69*x73))+((x69*x76))+(((-1.0)*x72*x75))+(((-1.0)*x81)));
evalcond[3]=((0.12)+(((-1.0)*x69*x75))+((x69*x74))+x79+(((-1.0)*x72*x73))+(((-1.0)*x72*x76))+(((-1.0)*x80)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x83 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
IkReal x82=x83.value;
j0array[0]=((-1.0)*x82);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x82)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x84=(cj0*py);
IkReal x85=(px*sj0);
j1eval[0]=((((-2.0)*x84*x85))+(x84*x84)+(pz*pz)+(x85*x85));
j1eval[1]=((((4.16666666666667)*(IKabs(((((-0.24)*x84))+(((0.24)*x85)))))))+(IKabs(pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((4.16666666666667)*(IKabs(((((0.24)*px*sj0))+(((-0.24)*cj0*py)))))))+(IKabs(pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x86=((1.0)*j1);
IkReal x87=cj0*cj0;
IkReal x88=px*px;
IkReal x89=pz*pz;
IkReal x90=py*py;
IkReal x91=(px*sj0);
IkReal x92=(cj0*py);
IkReal x106=IKsin(x86);
IkReal x93=x106*x106;
IkReal x107=IKcos(x86);
IkReal x94=x107*x107;
IkReal x95=(x87*x88);
IkReal x96=(x87*x90);
IkReal x97=((0.24)*x94);
IkReal x98=((2.0)*x91*x92);
IkReal x99=((1.0)*x93);
IkReal x100=((0.24)*x93);
IkReal x101=((1.0)*x94);
IkReal x102=(((pz*x100))+((pz*x97)));
IkReal x103=(((x100*x91))+(((-1.0)*x92*x97))+(((-1.0)*x100*x92))+((x91*x97)));
CheckValue<IkReal> x108 = IKatan2WithCheck(IkReal(x102),IkReal(x103),IKFAST_ATAN2_MAGTHRESH);
if(!x108.valid){
continue;
}
IkReal x104=((1.0)*(x108.value));
if((((x103*x103)+(x102*x102))) < -0.00001)
continue;
CheckValue<IkReal> x109=IKPowWithIntegerCheck(IKabs(IKsqrt(((x103*x103)+(x102*x102)))),-1);
if(!x109.valid){
continue;
}
if( (((x109.value)*(((0.0144)+x96+((x93*x95))+((x93*x98))+(((-1.0)*x101*x96))+(((-1.0)*x95))+(((-1.0)*x90))+(((-1.0)*x98))+(((-1.0)*x101*x89))+(((-1.0)*x101*x88))+(((-1.0)*x88*x99))+(((-0.0144)*x93))+(((-0.0144)*x94))+(((-1.0)*x96*x99))+((x94*x98))+((x94*x95))+(((-1.0)*x89*x99)))))) < -1-IKFAST_SINCOS_THRESH || (((x109.value)*(((0.0144)+x96+((x93*x95))+((x93*x98))+(((-1.0)*x101*x96))+(((-1.0)*x95))+(((-1.0)*x90))+(((-1.0)*x98))+(((-1.0)*x101*x89))+(((-1.0)*x101*x88))+(((-1.0)*x88*x99))+(((-0.0144)*x93))+(((-0.0144)*x94))+(((-1.0)*x96*x99))+((x94*x98))+((x94*x95))+(((-1.0)*x89*x99)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x105=IKasin(((x109.value)*(((0.0144)+x96+((x93*x95))+((x93*x98))+(((-1.0)*x101*x96))+(((-1.0)*x95))+(((-1.0)*x90))+(((-1.0)*x98))+(((-1.0)*x101*x89))+(((-1.0)*x101*x88))+(((-1.0)*x88*x99))+(((-0.0144)*x93))+(((-0.0144)*x94))+(((-1.0)*x96*x99))+((x94*x98))+((x94*x95))+(((-1.0)*x89*x99))))));
j1array[0]=((((-1.0)*x104))+(((-1.0)*x105)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x104))+x105);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x110=((1.0)*j1);
IkReal x111=IKcos(x110);
IkReal x112=IKsin(x110);
evalcond[0]=((-0.0144)+(((-1.0)*(px*px)))+(((0.0144)*(x111*x111)))+(((((((0.24)*px*sj0))+(((-0.24)*cj0*py))))*(IKsin(j1))))+(((0.24)*pz*(IKcos(j1))))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0144)*(x112*x112))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x113=((1.0)*j1);
IkReal x114=((8.33333333333333)*pz);
IkReal x115=IKcos(x113);
IkReal x116=IKsin(x113);
IkReal x117=((8.33333333333333)*px*sj0);
IkReal x118=((8.33333333333333)*cj0*py);
IkReal x119=(sj1*x115);
IkReal x120=(cj1*x116);
IkReal x121=(sj1*x116);
IkReal x122=(cj1*x115);
if( IKabs(((((-1.0)*x118*x119))+((x114*x121))+((x114*x122))+(((-1.0)*x117*x120))+(((-1.0)*x115))+((x118*x120))+((x117*x119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x114*x119))+(((-1.0)*x117*x122))+(((-1.0)*x117*x121))+x116+(((-1.0)*x114*x120))+((x118*x121))+((x118*x122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x118*x119))+((x114*x121))+((x114*x122))+(((-1.0)*x117*x120))+(((-1.0)*x115))+((x118*x120))+((x117*x119))))+IKsqr((((x114*x119))+(((-1.0)*x117*x122))+(((-1.0)*x117*x121))+x116+(((-1.0)*x114*x120))+((x118*x121))+((x118*x122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x118*x119))+((x114*x121))+((x114*x122))+(((-1.0)*x117*x120))+(((-1.0)*x115))+((x118*x120))+((x117*x119))), (((x114*x119))+(((-1.0)*x117*x122))+(((-1.0)*x117*x121))+x116+(((-1.0)*x114*x120))+((x118*x121))+((x118*x122))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x123=((1.0)*j1);
IkReal x124=IKcos(j2);
IkReal x125=IKsin(j2);
IkReal x126=((1.0)*pz);
IkReal x127=(cj1*pz);
IkReal x128=IKcos(x123);
IkReal x129=IKsin(x123);
IkReal x130=(px*sj0*sj1);
IkReal x131=(cj1*px*sj0);
IkReal x132=(cj0*py*sj1);
IkReal x133=((1.0)*cj0*cj1*py);
IkReal x134=(x125*x128);
IkReal x135=(x124*x128);
IkReal x136=(x125*x129);
IkReal x137=(x124*x129);
IkReal x138=((0.12)*x135);
IkReal x139=((0.12)*x136);
IkReal x140=((0.12)*x134);
IkReal x141=((0.12)*x137);
IkReal x142=(pz*x137);
IkReal x143=(x139+x138);
evalcond[0]=((-0.12)+(((-1.0)*x140))+x141+x130+x127+(((-1.0)*x132)));
evalcond[1]=((((-1.0)*sj1*x126))+x143+x131+(((-1.0)*x133)));
evalcond[2]=(((x127*x136))+((x127*x135))+(((-1.0)*x143))+(((-1.0)*x131*x137))+(((-1.0)*sj1*x126*x134))+((sj1*x142))+(((-1.0)*x133*x134))+((x131*x134))+((x130*x135))+((x130*x136))+(((-1.0)*x132*x135))+(((-1.0)*x132*x136))+((cj0*cj1*py*x137)));
evalcond[3]=((0.12)+((x127*x137))+(((-1.0)*x141))+(((-1.0)*x130*x134))+(((-1.0)*sj1*x126*x136))+(((-1.0)*sj1*x126*x135))+(((-1.0)*cj1*x126*x134))+(((-1.0)*x133*x136))+(((-1.0)*x133*x135))+x140+((x131*x135))+((x131*x136))+((x130*x137))+(((-1.0)*x132*x137))+((x132*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x144=((1.0)*j1);
IkReal x145=pz*pz;
IkReal x146=((((0.24)*px*sj0))+(((-0.24)*cj0*py)));
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((0.24)*pz)),IkReal(x146),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
IkReal x147=((1.0)*(x149.value));
if((((((0.0576)*x145))+(x146*x146))) < -0.00001)
continue;
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0576)*x145))+(x146*x146)))),-1);
if(!x150.valid){
continue;
}
IkReal x151=IKsin(x144);
IkReal x152=IKcos(x144);
if( (((x150.value)*(((-0.0144)+(((-1.0)*(px*px)))+(((0.0144)*(x151*x151)))+(((0.0144)*(x152*x152)))+(((-1.0)*x145))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((x150.value)*(((-0.0144)+(((-1.0)*(px*px)))+(((0.0144)*(x151*x151)))+(((0.0144)*(x152*x152)))+(((-1.0)*x145))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x148=IKasin(((x150.value)*(((-0.0144)+(((-1.0)*(px*px)))+(((0.0144)*(x151*x151)))+(((0.0144)*(x152*x152)))+(((-1.0)*x145))+(((-1.0)*(py*py)))))));
j1array[0]=((((-1.0)*x147))+(((-1.0)*x148)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x147))+x148);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x153=((1.0)*j1);
IkReal x154=cj0*cj0;
IkReal x155=px*px;
IkReal x156=pz*pz;
IkReal x157=py*py;
IkReal x158=(px*sj0);
IkReal x159=(cj0*py);
IkReal x169=IKcos(x153);
IkReal x160=x169*x169;
IkReal x170=IKsin(x153);
IkReal x161=x170*x170;
IkReal x162=(x154*x155);
IkReal x163=(x154*x157);
IkReal x164=((0.24)*x160);
IkReal x165=((2.0)*x158*x159);
IkReal x166=((1.0)*x161);
IkReal x167=((0.24)*x161);
IkReal x168=((1.0)*x160);
evalcond[0]=((0.0144)+((x161*x165))+((x161*x162))+(((-1.0)*x165))+(((-1.0)*x163*x168))+(((-1.0)*x163*x166))+x163+(((-1.0)*x162))+(((((((-1.0)*x159*x167))+(((-1.0)*x159*x164))+((x158*x167))+((x158*x164))))*(IKsin(j1))))+(((-1.0)*x157))+(((-1.0)*x155*x168))+(((-1.0)*x155*x166))+((x160*x162))+((x160*x165))+(((-1.0)*x156*x168))+(((-1.0)*x156*x166))+(((-0.0144)*x160))+(((-0.0144)*x161))+((((((pz*x164))+((pz*x167))))*(IKcos(j1)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x171=((1.0)*j1);
IkReal x172=((8.33333333333333)*pz);
IkReal x173=IKcos(x171);
IkReal x174=IKsin(x171);
IkReal x175=((8.33333333333333)*px*sj0);
IkReal x176=((8.33333333333333)*cj0*py);
IkReal x177=(sj1*x173);
IkReal x178=(cj1*x174);
IkReal x179=(sj1*x174);
IkReal x180=(cj1*x173);
if( IKabs(((((-1.0)*x175*x178))+((x176*x178))+((x172*x180))+((x172*x179))+(((-1.0)*x173))+((x175*x177))+(((-1.0)*x176*x177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x175*x179))+((x176*x180))+((x176*x179))+((x172*x177))+x174+(((-1.0)*x175*x180))+(((-1.0)*x172*x178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x175*x178))+((x176*x178))+((x172*x180))+((x172*x179))+(((-1.0)*x173))+((x175*x177))+(((-1.0)*x176*x177))))+IKsqr(((((-1.0)*x175*x179))+((x176*x180))+((x176*x179))+((x172*x177))+x174+(((-1.0)*x175*x180))+(((-1.0)*x172*x178))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x175*x178))+((x176*x178))+((x172*x180))+((x172*x179))+(((-1.0)*x173))+((x175*x177))+(((-1.0)*x176*x177))), ((((-1.0)*x175*x179))+((x176*x180))+((x176*x179))+((x172*x177))+x174+(((-1.0)*x175*x180))+(((-1.0)*x172*x178))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x181=((1.0)*j1);
IkReal x182=IKcos(j2);
IkReal x183=IKsin(j2);
IkReal x184=((1.0)*pz);
IkReal x185=(cj1*pz);
IkReal x186=IKcos(x181);
IkReal x187=IKsin(x181);
IkReal x188=(px*sj0*sj1);
IkReal x189=(cj1*px*sj0);
IkReal x190=(cj0*py*sj1);
IkReal x191=((1.0)*cj0*cj1*py);
IkReal x192=(x183*x186);
IkReal x193=(x182*x186);
IkReal x194=(x183*x187);
IkReal x195=(x182*x187);
IkReal x196=((0.12)*x193);
IkReal x197=((0.12)*x194);
IkReal x198=((0.12)*x192);
IkReal x199=((0.12)*x195);
IkReal x200=(pz*x195);
IkReal x201=(x197+x196);
evalcond[0]=((-0.12)+(((-1.0)*x190))+(((-1.0)*x198))+x199+x185+x188);
evalcond[1]=((((-1.0)*x191))+x189+x201+(((-1.0)*sj1*x184)));
evalcond[2]=(((sj1*x200))+(((-1.0)*x191*x192))+((x188*x193))+((x188*x194))+(((-1.0)*x189*x195))+((x189*x192))+((x185*x193))+((x185*x194))+(((-1.0)*x201))+((cj0*cj1*py*x195))+(((-1.0)*sj1*x184*x192))+(((-1.0)*x190*x194))+(((-1.0)*x190*x193)));
evalcond[3]=((0.12)+(((-1.0)*cj1*x184*x192))+(((-1.0)*x191*x193))+(((-1.0)*x191*x194))+(((-1.0)*x188*x192))+((x188*x195))+(((-1.0)*x199))+((x189*x193))+((x189*x194))+x198+((x185*x195))+(((-1.0)*sj1*x184*x194))+(((-1.0)*sj1*x184*x193))+((x190*x192))+(((-1.0)*x190*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - robot (90de6836c32a9949da86489f1c4c3eab)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
